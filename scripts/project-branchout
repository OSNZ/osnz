#!/bin/bash
function indexof() {
  echo "$1" "$2" | awk '{print index($1,$2)}'
}
function contains() {
  string="$1"
  substring="$2"
  if test "${string#*$substring}" != "$string"; then
    return 0    # $substring is in $string
  else
    return 1    # $substring is not in $string
  fi
}

gitBaseUrl="$1"
project="${2}"
pos1="$(indexof $project ':')"
pos2="$(indexof $project '/')"
projectGroup="${project:0:$pos1-1}"
projectGitUrl="${project:$pos1}"
projectName="${project:$pos2}"

set -e

cd "$(dirname "$0")/.."

if [[ -z "${project}" ]]; then
  echo Missing project arg
  exit 1
fi

if [[ -z "$projectGroup" ]]; then
  projectGroup="."
fi

function logProjectAction() {
  gitBranch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  if test "Pulling" = "$1"; then
    highlightedAction="\033[32;5;11m${1}\033[0m"
  elif test "Cloned" = "$1"; then
    highlightedAction="\033[33;5;11m${1}\033[0m"
  else
    highlightedAction="\033[31;5;11m${1}\033[0m"
  fi

  if test "master" = "${gitBranch}"; then
    echo -e "${highlightedAction} ${projectGroup}/${projectName} \033[70D\033[70C${gitBranch}"
  else
    echo -e "${highlightedAction} ${projectGroup}/${projectName} \033[70D\033[70C\033[38;5;11m${gitBranch}\033[0m"
  fi
}

if [[ -d "./${projectGroup}/${projectName}/.git" ]]; then
  cd "${projectGroup}/${projectName}"
  gitBranch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  if test "master" = "${gitBranch}" || test "develop" = "${gitBranch}"; then
    logProjectAction "Pulling"
    gitStash=$(git stash)
    git pull --rebase origin "${gitBranch}" > /dev/null 2>&1 || (echo -e "Failed: \033[31m${projectGroup}/${projectName}\033[0m \033[70D\033[70C\033[1m $( git pull --rebase origin ${gitBranch} 2>&1| head -n1)\033[0m")
    if contains "${gitStash}" "Saved working directory"; then
      git stash apply > /dev/null
    fi
  else
    logProjectAction "Ignore"
  fi
else
  cd "${projectGroup}"
  echo -e "Cloning Project: \033[92m${gitBaseUrl}:${projectGitUrl}.git\033[0m"
  if git clone "${gitBaseUrl}:${projectGitUrl}.git" > /dev/null 2>&1; then
    cd "${projectName}"
    logProjectAction "Cloned"
  else
    echo -e "Cloning failed: \033[31m${gitBaseUrl}:${projectGitUrl}.git\033[0m"
  fi
fi
